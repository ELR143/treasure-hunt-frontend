"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/leaderboard/page",{

/***/ "(app-pages-browser)/./src/utils/api.js":
/*!**************************!*\
  !*** ./src/utils/api.js ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\nconst baseUrl = \"https://treasure-hunt-backend-test.onrender.com/\";\n// /users requests\nfunction fetchData() {\n    let url = baseUrl + \"users/\";\n    return fetch(url).then((res)=>{\n        return res.json();\n    }).then((data)=>{\n        return data;\n    }).catch((error)=>{\n        console.error(\"Error fetching data:\", error);\n    });\n}\nfunction checkRegisteredUser(userName, userPassword) {\n    let url = baseUrl + \"users/\";\n    console.log(userName, userPassword);\n    return fetch(url).then((res)=>{\n        return res.json();\n    }).then((data)=>{\n        console.log(data[0].username);\n        if (userName === data[0].username) {\n            return data;\n        } else {\n            console.log(\"aefekjasudfakiej\");\n        // error? route to the page but with the 'Please log in' thing?\n        }\n    }).catch((error)=>{\n        console.error(\"Error fetching data:\", error);\n    });\n}\n// to edit the username or password, the request must be sent to the users endpoint\nfunction editUsernameAndPassword(userInfo) {\n    let url = baseUrl + \"users/\".concat(userId, \"/\");\n    return fetch(url).then((res)=>{\n        return res.json();\n    }).then((data)=>{\n        return data;\n    }).catch((error)=>{\n        console.error(\"Error fetching data:\", error);\n    });\n}\n// /profiles requests\n// to edit the avatar or treasures, the request must be sent to the profiles endpoint\nfunction editAvatarAndTreasures(userInfo) {\n    //userInfo =  {userName, what to change, updated info }\n    let url = baseUrl + \"profiles/\".concat(userId, \"/\");\n    return fetch(url).then((res)=>{\n        return res.json();\n    }).then((data)=>{\n        return data;\n    }).catch((error)=>{\n        console.error(\"Error fetching data:\", error);\n    });\n}\nfunction getUserTreasureCollection(userId1) {\n    let url = baseUrl + \"profiles/\".concat(userId1, \"/\");\n    return fetch(url).then((res)=>{\n        return res.json();\n    }).then((data)=>{\n        return data;\n    }).catch((error)=>{\n        console.error(\"Error fetching data:\", error);\n    });\n}\n// /treasures requests\nfunction getTreasureById(treasureId) {\n    let url = baseUrl + \"treasures/\".concat(treasureId, \"/\");\n    return fetch(url).then((res)=>{\n        return res.json();\n    }).then((data)=>{\n        return data;\n    }).catch((error)=>{\n        console.error(\"Error fetching data:\", error);\n    });\n}\nfunction getAllTreasures() {\n    let url = baseUrl + \"treasures/\";\n    return fetch(url).then((res)=>{\n        return res.json();\n    }).then((data)=>{\n        return data;\n    }).catch((error)=>{\n        console.error(\"Error fetching data:\", error);\n    });\n}\nfunction postLogin(username, password) {\n    const url = baseUrl + \"login\";\n    const reqBody = {\n        username: username,\n        password: password\n    };\n    const postObject = {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(reqBody)\n    };\n    return fetch(url, postObject).then((res)=>{\n        return res;\n    }).catch((error)=>{\n        return error;\n    });\n}\nfunction postNewUser(username, password) {\n    const url = baseUrl + \"users/\";\n    const reqBody = {\n        username: username,\n        password: password\n    };\n    const postObject = {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(reqBody)\n    };\n    return fetch(url, postObject).then((res)=>{\n        return res;\n    }).catch((error)=>{\n        return error;\n    });\n}\nfunction editProfile(userInfo, tableName, id) {\n    let url = \"\".concat(baseUrl).concat(tableName, \"/\").concat(id, \"/\");\n    return fetch(url, {\n        method: \"PATCH\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(userInfo)\n    }).then((response)=>{\n        if (!response.ok) {\n            throw new Error(\"Network response was not ok\");\n        }\n        return response.json();\n    }).catch((error)=>{\n        console.error(\"Error during fetch operation:\", error);\n    });\n}\nfunction getAllProfiles() {\n    let tableName = \"users\";\n    let url = \"\".concat(baseUrl).concat(tableName, \"/\");\n    const pendingUsers = fetch(url);\n    // .then((response) => {\n    //   return response.json();\n    // })\n    // .catch((error) => {\n    //   console.error(\"Error during fetch operation:\", error);\n    // });\n    url = \"\".concat(baseUrl, \"profiles\");\n    const pendingProfiles = fetch(url);\n    // .then((response) => {\n    //   return response.json();\n    // })\n    // .catch((error) => {\n    //   console.error(\"Error during fetch operation:\", error);\n    // });\n    return Promise.all([\n        pendingProfiles,\n        pendingUsers\n    ]).then((param)=>{\n        let [response1, response2] = param;\n        return [\n            response1.json(),\n            response2.json()\n        ];\n    }).then((one)=>{\n        console.log(one, \"PROMICE\");\n    }).catch((error)=>{\n        console.error(\"Error during fetch operation:\", error);\n    });\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    fetchData,\n    editAvatarAndTreasures,\n    editUsernameAndPassword,\n    checkRegisteredUser,\n    getUserTreasureCollection,\n    getTreasureById,\n    getAllTreasures,\n    postLogin,\n    postNewUser,\n    editProfile,\n    getAllProfiles\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/api.js\n"));

/***/ })

});